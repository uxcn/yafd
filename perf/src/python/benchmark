#!/usr/bin/env python

# benchmark - program to benchmark deduplicators

# Copyright (c) 2016 Jason Schulz <https://github.com/uxcn>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# author: jason

from __future__ import print_function

import sys

import os
import os.path

import time

import argparse

import subprocess

def init(p):

    p.add_argument('ps', nargs='+', metavar='path', help='paths')

    p.add_argument('-c', '--cmd', metavar='cmd', dest='c', required=True, help='command')
    p.add_argument('-h', '--header', dest='h', action='store_true', default=False, help='header')

def to_sets(ls):

    x = 0
    fss = list()

    while x < len(ls):

        f = ls[x]
        fs = list()

        x += 1

        while len(f) != 0 and not f.startswith('#'):
            fs.append(f)

            f = ls[x] if x < len(ls) else ''
            x += 1

        if len(fs) > 0:
            fss.append(fs)

    return fss

def bytesize_format(bs):

    KiB = 1024
    MiB = KiB * 1024
    GiB = MiB * 1024
    TiB = GiB * 1024
    PiB = TiB * 1024
    EiB = PiB * 1024
    ZiB = EiB * 1024
    YiB = ZiB * 1024

    if bs < KiB:
        return '%d B' % bs
    elif bs < MiB:
        return '%d.%d KiB' % ((bs >> 10), (int) ((bs % KiB) / (KiB / 100)))
    elif bs < GiB:
        return '%d.%d MiB' % ((bs >> 20), (int) ((bs % MiB) / (MiB / 100)))
    elif bs < TiB:
      return '%d.%d GiB' % ((bs >> 30), (int) ((bs % GiB) / (GiB / 100)))
    elif bs < PiB:
      return '%d.%d TiB' % ((bs >> 40), (int) ((bs % TiB) / (TiB / 100)))
    elif bs < EiB:
      return '%d.%d PiB' % ((bs >> 50), (int) ((bs % PiB) / (PiB / 100)))
    elif bs < ZiB:
        return '%d.%d EiB' % ((bs >> 60), (int) ((bs % EiB) (EiB / 100)))
    elif bs < YiB:
        return '%d.%d ZiB' % ((bs >> 70), (int) ((bs % ZiB) / (ZiB / 100)))
    else: # wow!
        return '%d.%d YiB' % ((bs >> 80), (int) ((bs % YiB) / (YiB / 100)))

g = argparse.ArgumentParser(add_help=False)

init(g)

a = g.parse_args()

c = a.c
h = a.h
ps = a.ps

sz = 0
dsz = 0

if h:
    print('command\t\ttime\tsize\t\tthroughput\tsize (dup)\tthroughput (dup)\tsize (reduced)')

for p in ps:

    for r, ds, fs in os.walk(p):
        sz += sum(os.path.getsize(os.path.join(r, n)) for n in fs)

ts = time.perf_counter()

ds = subprocess.check_output(c.split(' ') + ps, universal_newlines=True)

te = time.perf_counter()

tt = te - ts

dss = to_sets(ds.split('\n'))

dsz = sum(len(s) * os.path.getsize(s[1]) for s in dss)
rdsz = sum(os.path.getsize(s[1]) for s in dss)


print('%s\t%.2fs\t%s\t%s/s\t%s\t%s/s\t\t%s' %
       (c, tt, bytesize_format(sz), bytesize_format((int) (sz / tt)),
               bytesize_format(dsz), bytesize_format((int) (dsz / tt)),
               bytesize_format(rdsz)))


# vim:ft=python:et:ts=4:sts=4:sw=4:tw=80
